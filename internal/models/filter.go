// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Filter Single filter object for tables
//
// swagger:model Filter
type Filter struct {

	// key
	// Required: true
	Key *string `json:"key"`

	// op
	// Required: true
	// Enum: [eq ne ct in notin sw ew like gt ge lt le]
	Op *string `json:"op"`

	// value
	// Required: true
	Value interface{} `json:"value"`
}

// Validate validates this filter
func (m *Filter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Filter) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

var filterTypeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eq","ne","ct","in","notin","sw","ew","like","gt","ge","lt","le"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterTypeOpPropEnum = append(filterTypeOpPropEnum, v)
	}
}

const (

	// FilterOpEq captures enum value "eq"
	FilterOpEq string = "eq"

	// FilterOpNe captures enum value "ne"
	FilterOpNe string = "ne"

	// FilterOpCt captures enum value "ct"
	FilterOpCt string = "ct"

	// FilterOpIn captures enum value "in"
	FilterOpIn string = "in"

	// FilterOpNotin captures enum value "notin"
	FilterOpNotin string = "notin"

	// FilterOpSw captures enum value "sw"
	FilterOpSw string = "sw"

	// FilterOpEw captures enum value "ew"
	FilterOpEw string = "ew"

	// FilterOpLike captures enum value "like"
	FilterOpLike string = "like"

	// FilterOpGt captures enum value "gt"
	FilterOpGt string = "gt"

	// FilterOpGe captures enum value "ge"
	FilterOpGe string = "ge"

	// FilterOpLt captures enum value "lt"
	FilterOpLt string = "lt"

	// FilterOpLe captures enum value "le"
	FilterOpLe string = "le"
)

// prop value enum
func (m *Filter) validateOpEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filterTypeOpPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Filter) validateOp(formats strfmt.Registry) error {

	if err := validate.Required("op", "body", m.Op); err != nil {
		return err
	}

	// value enum
	if err := m.validateOpEnum("op", "body", *m.Op); err != nil {
		return err
	}

	return nil
}

func (m *Filter) validateValue(formats strfmt.Registry) error {

	if m.Value == nil {
		return errors.Required("value", "body", nil)
	}

	return nil
}

// ContextValidate validates this filter based on context it is used
func (m *Filter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Filter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Filter) UnmarshalBinary(b []byte) error {
	var res Filter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
